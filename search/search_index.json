{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MLCSim Investigations and research into different cell configurations and threshold distributions for multi-level cells (MLCs). Install with pip: $ git clone https://github.com/nobodywasishere/MLCSim $ cd MLCSim $ pip install . ... $ python -m mlcsim.simulation --help","title":"MLCSim"},{"location":"#mlcsim","text":"Investigations and research into different cell configurations and threshold distributions for multi-level cells (MLCs). Install with pip: $ git clone https://github.com/nobodywasishere/MLCSim $ cd MLCSim $ pip install . ... $ python -m mlcsim.simulation --help","title":"MLCSim"},{"location":"docstrings/MLCSim/","text":"module MLCSim MLCSim class This module provides the MLCSim class, which is used for encoding and decoding values to and from its MLC configuration. When called directly as main, it allows for encoding and decoding a value using a cell configuration json. $ python -m mlcsim.MLCSim --help usage: MLCSim.py [-h] -f F {enc,dec} val positional arguments: {enc,dec} action to take on value val val to {en,de}code options: -h, --help show this help message and exit -f F cell config json class MLCSim method __init__ __init__(config: List[List[int]]) init MLCSim Args: config (list): Cell configuration method checkCells checkCells(cells: List[int]) Checks the value of each cell to make sure they're not too large Args: cells (list): Cells to be checked Raises: ValueError : If cell value is too large method checkVal checkVal(val: int) Check if value can be stored in the MLC Args: val (int): Value to be checked Raises: ValueError : If value is too large method dec dec(cells: List[int]) \u2192 int Decode a value to MLC cells Args: cells (list): List representing the cells values Returns: int : Encoded value method enc enc(val: int) \u2192 List[int] Encode a value to MLC cells Args: val (int): Value to be encoded Returns: list : List representing the cells values This file was automatically generated via lazydocs .","title":"MLCSim"},{"location":"docstrings/MLCSim/#module-mlcsim","text":"MLCSim class This module provides the MLCSim class, which is used for encoding and decoding values to and from its MLC configuration. When called directly as main, it allows for encoding and decoding a value using a cell configuration json. $ python -m mlcsim.MLCSim --help usage: MLCSim.py [-h] -f F {enc,dec} val positional arguments: {enc,dec} action to take on value val val to {en,de}code options: -h, --help show this help message and exit -f F cell config json","title":"module MLCSim"},{"location":"docstrings/MLCSim/#class-mlcsim","text":"","title":"class MLCSim"},{"location":"docstrings/MLCSim/#method-__init__","text":"__init__(config: List[List[int]]) init MLCSim Args: config (list): Cell configuration","title":"method __init__"},{"location":"docstrings/MLCSim/#method-checkcells","text":"checkCells(cells: List[int]) Checks the value of each cell to make sure they're not too large Args: cells (list): Cells to be checked Raises: ValueError : If cell value is too large","title":"method checkCells"},{"location":"docstrings/MLCSim/#method-checkval","text":"checkVal(val: int) Check if value can be stored in the MLC Args: val (int): Value to be checked Raises: ValueError : If value is too large","title":"method checkVal"},{"location":"docstrings/MLCSim/#method-dec","text":"dec(cells: List[int]) \u2192 int Decode a value to MLC cells Args: cells (list): List representing the cells values Returns: int : Encoded value","title":"method dec"},{"location":"docstrings/MLCSim/#method-enc","text":"enc(val: int) \u2192 List[int] Encode a value to MLC cells Args: val (int): Value to be encoded Returns: list : List representing the cells values This file was automatically generated via lazydocs .","title":"method enc"},{"location":"docstrings/REAMDE/","text":"API Overview Modules MLCSim : MLCSim class cconfigs : Cell configuration functions dist : Distribution functions mat : Matrix functions simulation : MLC encoding/threshold simulation script steps : Script for finding configurations steps_plot : Script for plotting different cell configurations thresh : Threshold functions Classes MLCSim.MLCSim Functions cconfigs.calcCellDelta : Calculates the sum of the step sizes for a cell cconfigs.calcCellDeltaList : Calculates the list of step sizes for a cell cconfigs.findAllConfigs : Calculates all possible cell configurations cconfigs.sortConfigs : Generates all cell configs and sorts them by their delta and error sum dist.genErrorMap : Generate an error map from a threshold map dist.normalChance : Find the chance of a normal distribution above/below a given value dist.normalMidpoint : Find the midpoint between two normal distributions mat.calcErrMagnitude : Calculates the magnitude of errors difference between two matrices mat.generateMatrix : Generates a matrix of random values of a given size mat.injectFaults : Inject faults into an MLC matrix thresh.generateThresh : Generates a threshold map This file was automatically generated via lazydocs .","title":"Overview"},{"location":"docstrings/REAMDE/#api-overview","text":"","title":"API Overview"},{"location":"docstrings/REAMDE/#modules","text":"MLCSim : MLCSim class cconfigs : Cell configuration functions dist : Distribution functions mat : Matrix functions simulation : MLC encoding/threshold simulation script steps : Script for finding configurations steps_plot : Script for plotting different cell configurations thresh : Threshold functions","title":"Modules"},{"location":"docstrings/REAMDE/#classes","text":"MLCSim.MLCSim","title":"Classes"},{"location":"docstrings/REAMDE/#functions","text":"cconfigs.calcCellDelta : Calculates the sum of the step sizes for a cell cconfigs.calcCellDeltaList : Calculates the list of step sizes for a cell cconfigs.findAllConfigs : Calculates all possible cell configurations cconfigs.sortConfigs : Generates all cell configs and sorts them by their delta and error sum dist.genErrorMap : Generate an error map from a threshold map dist.normalChance : Find the chance of a normal distribution above/below a given value dist.normalMidpoint : Find the midpoint between two normal distributions mat.calcErrMagnitude : Calculates the magnitude of errors difference between two matrices mat.generateMatrix : Generates a matrix of random values of a given size mat.injectFaults : Inject faults into an MLC matrix thresh.generateThresh : Generates a threshold map This file was automatically generated via lazydocs .","title":"Functions"},{"location":"docstrings/cconfigs/","text":"module cconfigs Cell configuration functions This module provides functions for finding/handling cell configurations. When called directly as main, it outputs a list of the best and wost configs. $ python -m mlcsim.cconfigs --help usage: cconfigs.py [-h] [-b {1,2,3,4}] [-c {1,2,3,4,5,6,7,8,9}] [-o O] options: -h, --help show this help message and exit -b {1,2,3,4} bits per cell -c {1,2,3,4,5,6,7,8,9} num of cells -o O output to file function findAllConfigs findAllConfigs(bits_per_cell: int, num_cells: int) \u2192 List[List[List[int]]] Calculates all possible cell configurations Args: bits_per_cell (int): Bits per cell num_cells (int): Number of cells Returns: list : List of all possible cell configurations function sortConfigs sortConfigs( b: int, c: int, error_map: List[List[float]] ) \u2192 List[Tuple[float, List[List[int]], float]] Generates all cell configs and sorts them by their delta and error sum Args: b (int): Bits per cell c (int): Number of cells error_map (dict): Error map dictionary Returns: list : All configs sorted by delta and error sum function calcCellDelta calcCellDelta(cell: List[int], bpc: int) \u2192 int Calculates the sum of the step sizes for a cell Args: cell (list): List of bits in a cell (i.e. [0, 1, 2, 3]) bpc (int): Bits per cell Returns: int : Sum of the step sizes between levels in the cell function calcCellDeltaList calcCellDeltaList(cell: List[int]) \u2192 List[int] Calculates the list of step sizes for a cell Args: cell (list): List of bits in a cell (i.e. [0, 1, 2, 3]) Returns: list : List of step sizes between levels in the cell This file was automatically generated via lazydocs .","title":"Cconfigs"},{"location":"docstrings/cconfigs/#module-cconfigs","text":"Cell configuration functions This module provides functions for finding/handling cell configurations. When called directly as main, it outputs a list of the best and wost configs. $ python -m mlcsim.cconfigs --help usage: cconfigs.py [-h] [-b {1,2,3,4}] [-c {1,2,3,4,5,6,7,8,9}] [-o O] options: -h, --help show this help message and exit -b {1,2,3,4} bits per cell -c {1,2,3,4,5,6,7,8,9} num of cells -o O output to file","title":"module cconfigs"},{"location":"docstrings/cconfigs/#function-findallconfigs","text":"findAllConfigs(bits_per_cell: int, num_cells: int) \u2192 List[List[List[int]]] Calculates all possible cell configurations Args: bits_per_cell (int): Bits per cell num_cells (int): Number of cells Returns: list : List of all possible cell configurations","title":"function findAllConfigs"},{"location":"docstrings/cconfigs/#function-sortconfigs","text":"sortConfigs( b: int, c: int, error_map: List[List[float]] ) \u2192 List[Tuple[float, List[List[int]], float]] Generates all cell configs and sorts them by their delta and error sum Args: b (int): Bits per cell c (int): Number of cells error_map (dict): Error map dictionary Returns: list : All configs sorted by delta and error sum","title":"function sortConfigs"},{"location":"docstrings/cconfigs/#function-calccelldelta","text":"calcCellDelta(cell: List[int], bpc: int) \u2192 int Calculates the sum of the step sizes for a cell Args: cell (list): List of bits in a cell (i.e. [0, 1, 2, 3]) bpc (int): Bits per cell Returns: int : Sum of the step sizes between levels in the cell","title":"function calcCellDelta"},{"location":"docstrings/cconfigs/#function-calccelldeltalist","text":"calcCellDeltaList(cell: List[int]) \u2192 List[int] Calculates the list of step sizes for a cell Args: cell (list): List of bits in a cell (i.e. [0, 1, 2, 3]) Returns: list : List of step sizes between levels in the cell This file was automatically generated via lazydocs .","title":"function calcCellDeltaList"},{"location":"docstrings/dist/","text":"module dist Distribution functions This module provides functions for dealing with normal distributions and generating error maps. When called directly as main, it allows for converting a threshold map into an error map. $ python -m mlcsim.dist --help usage: dist.py [-h] [-b {1,2,3,4}] -f F [-o O] options: -h, --help show this help message and exit -b {1,2,3,4} bits per cell -f F Threshold map json to convert -o O output to file function normalMidpoint normalMidpoint(mean_a: float, mean_b: float, std_a: float, std_b: float) \u2192 float Find the midpoint between two normal distributions Args: mean_a (float): Mean of first distribution mean_b (float): Mean of second distribution std_a (float): Std dev of first distribution std_b (float): Std dev of second distribution Returns: float : Midpoint between distributions function normalChance normalChance(mean: float, stdev: float, thr: float) \u2192 float Find the chance of a normal distribution above/below a given value Args: mean (float): Mean of the distribution stdev (float): Std dev of the distribution thr (float): Threshold to check above/below Returns: float : Chance for threshold to end up above/below the given point in the distribution function genErrorMap genErrorMap( thr_maps: Dict[str, List[List[float]]], bpc: int ) \u2192 List[List[float]] Generate an error map from a threshold map Args: thr_maps (dict): Threshold map bpc (int): Bits per cell Raises: ValueError : if the given bpc is not in the threshold map Returns: list : Error map from the threshold map This file was automatically generated via lazydocs .","title":"Dist"},{"location":"docstrings/dist/#module-dist","text":"Distribution functions This module provides functions for dealing with normal distributions and generating error maps. When called directly as main, it allows for converting a threshold map into an error map. $ python -m mlcsim.dist --help usage: dist.py [-h] [-b {1,2,3,4}] -f F [-o O] options: -h, --help show this help message and exit -b {1,2,3,4} bits per cell -f F Threshold map json to convert -o O output to file","title":"module dist"},{"location":"docstrings/dist/#function-normalmidpoint","text":"normalMidpoint(mean_a: float, mean_b: float, std_a: float, std_b: float) \u2192 float Find the midpoint between two normal distributions Args: mean_a (float): Mean of first distribution mean_b (float): Mean of second distribution std_a (float): Std dev of first distribution std_b (float): Std dev of second distribution Returns: float : Midpoint between distributions","title":"function normalMidpoint"},{"location":"docstrings/dist/#function-normalchance","text":"normalChance(mean: float, stdev: float, thr: float) \u2192 float Find the chance of a normal distribution above/below a given value Args: mean (float): Mean of the distribution stdev (float): Std dev of the distribution thr (float): Threshold to check above/below Returns: float : Chance for threshold to end up above/below the given point in the distribution","title":"function normalChance"},{"location":"docstrings/dist/#function-generrormap","text":"genErrorMap( thr_maps: Dict[str, List[List[float]]], bpc: int ) \u2192 List[List[float]] Generate an error map from a threshold map Args: thr_maps (dict): Threshold map bpc (int): Bits per cell Raises: ValueError : if the given bpc is not in the threshold map Returns: list : Error map from the threshold map This file was automatically generated via lazydocs .","title":"function genErrorMap"},{"location":"docstrings/mat/","text":"module mat Matrix functions This module provides functions for creating and handling matrix applications. function generateMatrix generateMatrix(b: int, c: int, arr_size: int) \u2192 List[List[int]] Generates a matrix of random values of a given size Args: b (int): Bits per cell c (int): Number of cells arr_size (int): Size of the array Returns: list : List of lists representing the array function injectFaults injectFaults(mat: List[List[int]], error_map: List[List[float]], b: int) \u2192 int Inject faults into an MLC matrix Args: mat (list): Matrix to inject faults into error_map (dict): Error map dictionary b (int): Bits per cell Returns: int : Number of injected errors in the matrix function calcErrMagnitude calcErrMagnitude( configs: List[List[List[int]]], in_mat: List[List[int]], out_mat: List[List[int]], errs: List[List[int]], errs_perc: List[List[float]] ) Calculates the magnitude of errors difference between two matrices Args: configs (dict): Cell configuration in_mat (list): Clean matrix out_mat (list): Dirty/error matrix errs (list): Magnitude of error appended to at index corresponding to the index of the config errs_perc (list): Percent magnitude of error appended to at index corresponding to the index of the config This file was automatically generated via lazydocs .","title":"Mat"},{"location":"docstrings/mat/#module-mat","text":"Matrix functions This module provides functions for creating and handling matrix applications.","title":"module mat"},{"location":"docstrings/mat/#function-generatematrix","text":"generateMatrix(b: int, c: int, arr_size: int) \u2192 List[List[int]] Generates a matrix of random values of a given size Args: b (int): Bits per cell c (int): Number of cells arr_size (int): Size of the array Returns: list : List of lists representing the array","title":"function generateMatrix"},{"location":"docstrings/mat/#function-injectfaults","text":"injectFaults(mat: List[List[int]], error_map: List[List[float]], b: int) \u2192 int Inject faults into an MLC matrix Args: mat (list): Matrix to inject faults into error_map (dict): Error map dictionary b (int): Bits per cell Returns: int : Number of injected errors in the matrix","title":"function injectFaults"},{"location":"docstrings/mat/#function-calcerrmagnitude","text":"calcErrMagnitude( configs: List[List[List[int]]], in_mat: List[List[int]], out_mat: List[List[int]], errs: List[List[int]], errs_perc: List[List[float]] ) Calculates the magnitude of errors difference between two matrices Args: configs (dict): Cell configuration in_mat (list): Clean matrix out_mat (list): Dirty/error matrix errs (list): Magnitude of error appended to at index corresponding to the index of the config errs_perc (list): Percent magnitude of error appended to at index corresponding to the index of the config This file was automatically generated via lazydocs .","title":"function calcErrMagnitude"},{"location":"docstrings/simulation/","text":"module simulation MLC encoding/threshold simulation script When called directly as main, it will execute a simulation testing different cell configurations chosen automatically or passed through, checking each of their error mean and stdev to single-level errors. $ python -m mlcsim.simulation --help usage: simulation.py [-h] [-b {2,3,4}] [-c {2,3,4,5,6,7,8}] [-f F] [--arr-size ARR_SIZE] [--iter-size ITER_SIZE] [--thr THR] [--plot] options: -h, --help show this help message and exit -b {2,3,4} bits per cell -c {2,3,4,5,6,7,8} num of cells -f F config JSON --arr-size ARR_SIZE size of the array to test --iter-size ITER_SIZE number of arrays to test --thr THR Threshold map to test --plot This file was automatically generated via lazydocs .","title":"Simulation"},{"location":"docstrings/simulation/#module-simulation","text":"MLC encoding/threshold simulation script When called directly as main, it will execute a simulation testing different cell configurations chosen automatically or passed through, checking each of their error mean and stdev to single-level errors. $ python -m mlcsim.simulation --help usage: simulation.py [-h] [-b {2,3,4}] [-c {2,3,4,5,6,7,8}] [-f F] [--arr-size ARR_SIZE] [--iter-size ITER_SIZE] [--thr THR] [--plot] options: -h, --help show this help message and exit -b {2,3,4} bits per cell -c {2,3,4,5,6,7,8} num of cells -f F config JSON --arr-size ARR_SIZE size of the array to test --iter-size ITER_SIZE number of arrays to test --thr THR Threshold map to test --plot This file was automatically generated via lazydocs .","title":"module simulation"},{"location":"docstrings/steps/","text":"module steps Script for finding configurations When called directly as main, it will provide the 'scores' of all the possible configurations. $ python -m mlcsim.steps --help usage: steps.py [-h] [-b {2,3,4}] [-c {2,3,4,5,6,7,8}] --thr THR options: -h, --help show this help message and exit -b {2,3,4} bits per cell -c {2,3,4,5,6,7,8} num of cells --thr THR Threshold map JSO Prints out a pretty markdown table $ ./mlcsim/steps.py --thr config/thr-split-1.json -b 2 -c 3 Calculating 15.0 permutations... | config | stdev | sum * err | |----------------------------|--------------|--------------| | `[[2, 3], [1, 4], [0, 5]]` | 0.0010835747 | 0.0049746942 | | `[[2, 3], [1, 5], [0, 4]]` | 0.0010840178 | 0.0049746942 | | `[[2, 4], [1, 3], [0, 5]]` | 0.0010840178 | 0.0049746942 | | `[[2, 4], [1, 5], [0, 3]]` | 0.0010846822 | 0.0049746942 | | `[[2, 5], [1, 3], [0, 4]]` | 0.0010853461 | 0.0049746942 | | `[[2, 5], [1, 4], [0, 3]]` | 0.0010855673 | 0.0049746942 | | `[[3, 4], [2, 5], [0, 1]]` | 0.0024939156 | 0.0092341522 | | `[[3, 5], [2, 4], [0, 1]]` | 0.0024946857 | 0.0092341522 | | `[[3, 4], [1, 2], [0, 5]]` | 0.0026877419 | 0.0078143329 | | `[[3, 4], [1, 5], [0, 2]]` | 0.0026880545 | 0.0078143329 | | `[[3, 5], [1, 2], [0, 4]]` | 0.0026889923 | 0.0078143329 | | `[[3, 5], [1, 4], [0, 2]]` | 0.0026891262 | 0.0078143329 | | `[[4, 5], [2, 3], [0, 1]]` | 0.0056367465 | 0.0149134295 | | `[[4, 5], [1, 2], [0, 3]]` | 0.0059556212 | 0.0134936102 | | `[[4, 5], [1, 3], [0, 2]]` | 0.0059556414 | 0.0134936102 | $ ./mlcsim/steps.py --thr config/thr-uniform.json -b 2 -c 3 Calculating 15.0 permutations... | config | stdev | sum * err | |----------------------------|--------------|--------------| | `[[2, 3], [1, 4], [0, 5]]` | 0.0003343276 | 0.0019472414 | | `[[2, 3], [1, 5], [0, 4]]` | 0.0003564553 | 0.0019472414 | | `[[2, 4], [1, 3], [0, 5]]` | 0.0003564553 | 0.0019472414 | | `[[2, 4], [1, 5], [0, 3]]` | 0.0003872836 | 0.0019472414 | | `[[2, 5], [1, 3], [0, 4]]` | 0.0004158326 | 0.0019472414 | | `[[2, 5], [1, 4], [0, 3]]` | 0.0004249229 | 0.0019472414 | | `[[3, 4], [1, 2], [0, 5]]` | 0.0004249229 | 0.0019472414 | | `[[3, 4], [1, 5], [0, 2]]` | 0.0004553120 | 0.0019472414 | | `[[3, 4], [2, 5], [0, 1]]` | 0.0005162753 | 0.0019472414 | | `[[3, 5], [1, 2], [0, 4]]` | 0.0005362441 | 0.0019472414 | | `[[3, 5], [1, 4], [0, 2]]` | 0.0005468288 | 0.0019472414 | | `[[3, 5], [2, 4], [0, 1]]` | 0.0005724352 | 0.0019472414 | | `[[4, 5], [1, 2], [0, 3]]` | 0.0007242115 | 0.0019472414 | | `[[4, 5], [1, 3], [0, 2]]` | 0.0007268450 | 0.0019472414 | | `[[4, 5], [2, 3], [0, 1]]` | 0.0007359881 | 0.0019472414 | This file was automatically generated via lazydocs .","title":"Steps"},{"location":"docstrings/steps/#module-steps","text":"Script for finding configurations When called directly as main, it will provide the 'scores' of all the possible configurations. $ python -m mlcsim.steps --help usage: steps.py [-h] [-b {2,3,4}] [-c {2,3,4,5,6,7,8}] --thr THR options: -h, --help show this help message and exit -b {2,3,4} bits per cell -c {2,3,4,5,6,7,8} num of cells --thr THR Threshold map JSO Prints out a pretty markdown table $ ./mlcsim/steps.py --thr config/thr-split-1.json -b 2 -c 3 Calculating 15.0 permutations... | config | stdev | sum * err | |----------------------------|--------------|--------------| | `[[2, 3], [1, 4], [0, 5]]` | 0.0010835747 | 0.0049746942 | | `[[2, 3], [1, 5], [0, 4]]` | 0.0010840178 | 0.0049746942 | | `[[2, 4], [1, 3], [0, 5]]` | 0.0010840178 | 0.0049746942 | | `[[2, 4], [1, 5], [0, 3]]` | 0.0010846822 | 0.0049746942 | | `[[2, 5], [1, 3], [0, 4]]` | 0.0010853461 | 0.0049746942 | | `[[2, 5], [1, 4], [0, 3]]` | 0.0010855673 | 0.0049746942 | | `[[3, 4], [2, 5], [0, 1]]` | 0.0024939156 | 0.0092341522 | | `[[3, 5], [2, 4], [0, 1]]` | 0.0024946857 | 0.0092341522 | | `[[3, 4], [1, 2], [0, 5]]` | 0.0026877419 | 0.0078143329 | | `[[3, 4], [1, 5], [0, 2]]` | 0.0026880545 | 0.0078143329 | | `[[3, 5], [1, 2], [0, 4]]` | 0.0026889923 | 0.0078143329 | | `[[3, 5], [1, 4], [0, 2]]` | 0.0026891262 | 0.0078143329 | | `[[4, 5], [2, 3], [0, 1]]` | 0.0056367465 | 0.0149134295 | | `[[4, 5], [1, 2], [0, 3]]` | 0.0059556212 | 0.0134936102 | | `[[4, 5], [1, 3], [0, 2]]` | 0.0059556414 | 0.0134936102 | $ ./mlcsim/steps.py --thr config/thr-uniform.json -b 2 -c 3 Calculating 15.0 permutations... | config | stdev | sum * err | |----------------------------|--------------|--------------| | `[[2, 3], [1, 4], [0, 5]]` | 0.0003343276 | 0.0019472414 | | `[[2, 3], [1, 5], [0, 4]]` | 0.0003564553 | 0.0019472414 | | `[[2, 4], [1, 3], [0, 5]]` | 0.0003564553 | 0.0019472414 | | `[[2, 4], [1, 5], [0, 3]]` | 0.0003872836 | 0.0019472414 | | `[[2, 5], [1, 3], [0, 4]]` | 0.0004158326 | 0.0019472414 | | `[[2, 5], [1, 4], [0, 3]]` | 0.0004249229 | 0.0019472414 | | `[[3, 4], [1, 2], [0, 5]]` | 0.0004249229 | 0.0019472414 | | `[[3, 4], [1, 5], [0, 2]]` | 0.0004553120 | 0.0019472414 | | `[[3, 4], [2, 5], [0, 1]]` | 0.0005162753 | 0.0019472414 | | `[[3, 5], [1, 2], [0, 4]]` | 0.0005362441 | 0.0019472414 | | `[[3, 5], [1, 4], [0, 2]]` | 0.0005468288 | 0.0019472414 | | `[[3, 5], [2, 4], [0, 1]]` | 0.0005724352 | 0.0019472414 | | `[[4, 5], [1, 2], [0, 3]]` | 0.0007242115 | 0.0019472414 | | `[[4, 5], [1, 3], [0, 2]]` | 0.0007268450 | 0.0019472414 | | `[[4, 5], [2, 3], [0, 1]]` | 0.0007359881 | 0.0019472414 | This file was automatically generated via lazydocs .","title":"module steps"},{"location":"docstrings/steps_plot/","text":"module steps_plot Script for plotting different cell configurations When called directly as main, it will create a pyplot showing the steps sizes between each threshold level in an encoded MLC value. 3 cells, 3 bits per cell, split-1 threshold distribution 3 cells, 3 bits per cell, uniform threshold distribution This file was automatically generated via lazydocs .","title":"Steps plot"},{"location":"docstrings/steps_plot/#module-steps_plot","text":"Script for plotting different cell configurations When called directly as main, it will create a pyplot showing the steps sizes between each threshold level in an encoded MLC value. 3 cells, 3 bits per cell, split-1 threshold distribution 3 cells, 3 bits per cell, uniform threshold distribution This file was automatically generated via lazydocs .","title":"module steps_plot"},{"location":"docstrings/thresh/","text":"module thresh Threshold functions This module provides functions for creating threshold maps. When called directly as main, it allows for creating a threshold map based on the number of bits per cell, the std dev of each threshold level, and the threshold distribution. $ python -m mlcsim.thresh --help usage: thresh.py [-h] [-d D] [-e E] [-f F] [--plot] [--scale-e] options: -h, --help show this help message and exit -d D Threshold distribution -e E Threshold stdev for 2 bits per cell -f F Threshold map json to output --plot --scale-e Scale -e with MLC size to preserve overlap Currently supported threshold distributions are uniform , and split-n where increasing n increases the amount of separation in the center. uniform threshold distribution: split-1 threshold distribution: split-2 threshold distribution: function generateThresh generateThresh(b: int, e: float, dist: str) \u2192 List[Tuple[float, float]] Generates a threshold map Args: b (int): bits per cell e (float): std dev between levels dist (str): threshold distribution (uniform or split-*) Raises: ValueError : if dist is not uniform or split-* Returns: list : threshold map This file was automatically generated via lazydocs .","title":"Thresh"},{"location":"docstrings/thresh/#module-thresh","text":"Threshold functions This module provides functions for creating threshold maps. When called directly as main, it allows for creating a threshold map based on the number of bits per cell, the std dev of each threshold level, and the threshold distribution. $ python -m mlcsim.thresh --help usage: thresh.py [-h] [-d D] [-e E] [-f F] [--plot] [--scale-e] options: -h, --help show this help message and exit -d D Threshold distribution -e E Threshold stdev for 2 bits per cell -f F Threshold map json to output --plot --scale-e Scale -e with MLC size to preserve overlap Currently supported threshold distributions are uniform , and split-n where increasing n increases the amount of separation in the center. uniform threshold distribution: split-1 threshold distribution: split-2 threshold distribution:","title":"module thresh"},{"location":"docstrings/thresh/#function-generatethresh","text":"generateThresh(b: int, e: float, dist: str) \u2192 List[Tuple[float, float]] Generates a threshold map Args: b (int): bits per cell e (float): std dev between levels dist (str): threshold distribution (uniform or split-*) Raises: ValueError : if dist is not uniform or split-* Returns: list : threshold map This file was automatically generated via lazydocs .","title":"function generateThresh"}]}